# -*- coding: utf-8 -*-
"""
–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ AI-–º–æ–¥–µ–ª–µ–π –≤ 4-–±–∏—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (bnb4).
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Vision-Language –º–æ–¥–µ–ª–∏, –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –æ–±—ã—á–Ω—ã–µ LLM.
"""

import sys
import json
import traceback
import warnings
from pathlib import Path
from multiprocessing import Process, Event, Pipe, set_start_method
import torch
import tkinter as tk
from tkinter import ttk, filedialog, messagebox

warnings.filterwarnings('ignore', category=FutureWarning)

set_start_method('spawn', force=True)

def download_worker(cfg, conn, stop_evt):
    """–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    import logging, gc, warnings
    from transformers import (
        AutoModelForImageTextToText, AutoModelForCausalLM,
        AutoTokenizer, AutoImageProcessor, BitsAndBytesConfig
    )
    
    warnings.filterwarnings('ignore', category=FutureWarning)
    warnings.filterwarnings('ignore', message=".*Xet Storage.*")
    
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

    def send_log(msg):
        if stop_evt.is_set(): 
            raise KeyboardInterrupt()
        conn.send(('log', msg))

    def send_progress(pct, stage=""):
        if stop_evt.is_set(): 
            raise KeyboardInterrupt()
        conn.send(('progress', pct, stage))

    def send_status(status):
        if stop_evt.is_set(): 
            raise KeyboardInterrupt()
        conn.send(('status', status))

    try:
        url = cfg['TARGET_MODEL_URL']
        repo = url.rstrip('/').split('/')[-1]
        out_dir = Path(cfg['OUTPUT_PATH'])
        out_dir.mkdir(parents=True, exist_ok=True)

        send_log(f"‚ñ∂Ô∏è –ù–∞—á–∞–ª–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {url}")
        send_status("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
        send_progress(0)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        device_map = "auto"
        if cfg.get('FORCE_CPU', False):
            device_map = "cpu"
            send_log("üñ•Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU")
        elif cfg.get('DEVICE') == 'cpu':
            device_map = "cpu"
            send_log("üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º")
        elif cfg.get('DEVICE') == 'cuda':
            device_map = "cuda"
            send_log("üéÆ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU")
        else:
            send_log("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è 4-–±–∏—Ç–Ω–æ–≥–æ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è
        bnb_config = BitsAndBytesConfig(
            load_in_4bit=True,
            bnb_4bit_use_double_quant=True,
            bnb_4bit_quant_type="nf4",
            bnb_4bit_compute_dtype=(
                torch.bfloat16 if torch.cuda.is_available() and torch.cuda.is_bf16_supported() and device_map != "cpu"
                else torch.float16
            )
        )

        send_status("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏")
        send_progress(15)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å —É—á—ë—Ç–æ–º —Ç–∏–ø–∞ –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        try:
            if cfg['MODEL_TYPE'] == 'vision':
                model = AutoModelForImageTextToText.from_pretrained(
                    url, 
                    quantization_config=bnb_config if device_map != "cpu" else None,
                    device_map=device_map, 
                    trust_remote_code=True,
                    dtype=torch.float16 if device_map == "cpu" else None  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: dtype –≤–º–µ—Å—Ç–æ torch_dtype
                )
            else:
                raise ValueError
        except Exception:
            model = AutoModelForCausalLM.from_pretrained(
                url, 
                quantization_config=bnb_config if device_map != "cpu" else None,
                device_map=device_map, 
                trust_remote_code=True,
                dtype=torch.float16 if device_map == "cpu" else None  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: dtype –≤–º–µ—Å—Ç–æ torch_dtype
            )

        send_status("–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞")
        send_progress(40)
        tokenizer = AutoTokenizer.from_pretrained(url, trust_remote_code=True)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è VL-–º–æ–¥–µ–ª–µ–π
        image_processor = None
        if cfg['MODEL_TYPE'] == 'vision':
            try:
                send_status("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                send_progress(55)
                image_processor = AutoImageProcessor.from_pretrained(
                    url, 
                    trust_remote_code=True,
                    use_fast=True
                )
            except:
                send_log("‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å)")

        # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        send_status("–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏")
        send_progress(70)
        if torch.cuda.is_available() and device_map != "cpu":
            torch.cuda.empty_cache()
        gc.collect()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        final_path = out_dir / f"{repo}-bnb4"
        final_path.mkdir(exist_ok=True)

        send_status("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
        send_progress(85)
        model.save_pretrained(final_path, safe_serialization=cfg['SAFE_SERIALIZATION'])
        tokenizer.save_pretrained(final_path)
        if image_processor:
            image_processor.save_pretrained(final_path)

        send_log(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {final_path}")
        send_status("–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        send_progress(100)
        
    except KeyboardInterrupt:
        send_log("‚èπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        send_log(f"‚ùå –û—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")
    finally:
        conn.send(('done', None))
        conn.close()


class ConverterGUI:
    def __init__(self, root):
        self.root = root
        self._setup_window()
        self._init_variables()
        self._define_models()
        
        self.build_ui()
        self.load_settings()
        self.redirect_output()
        self.check_pipe()

    def _setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ —Å—Ç–∏–ª–µ–π"""
        self.root.title("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä AI-–º–æ–¥–µ–ª–µ–π –≤ bnb4 —Ñ–æ—Ä–º–∞—Ç")
        self.root.geometry("1100x800")  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–∞
        self.root.minsize(1000, 750)
        
        try:
            style = ttk.Style()
            if 'vista' in style.theme_names():
                style.theme_use('vista')
            elif 'clam' in style.theme_names():
                style.theme_use('clam')
                
            style.configure('Title.TLabel', font=('TkDefaultFont', 14, 'bold'))
            style.configure('Heading.TLabel', font=('TkDefaultFont', 10, 'bold'))
            style.configure('Info.TLabel', font=('TkDefaultFont', 8), foreground='#666666')
            style.configure('Success.TLabel', foreground='#28a745')
            style.configure('Error.TLabel', foreground='#dc3545')
            style.configure('Warning.TLabel', foreground='#fd7e14')
        except:
            pass

    def _init_variables(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è multiprocessing"""
        self.proc = None
        self.stop_evt = Event()
        self.parent_conn, self.child_conn = Pipe()

    def _define_models(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        self.model_groups = {
            "üñºÔ∏è Vision-Language –º–æ–¥–µ–ª–∏": {
                "NuMarkdown-8B-Thinking": {
                    "url": "numind/NuMarkdown-8B-Thinking",
                    "type": "vision", "params": "8B",
                    "desc": "OCR-–º–æ–¥–µ–ª—å —Å reasoning —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
                },
                "Qwen2.5-VL-7B-Instruct": {
                    "url": "Qwen/Qwen2.5-VL-7B-Instruct",
                    "type": "vision", "params": "7B",
                    "desc": "–ú–Ω–æ–≥–æ–º–æ–¥–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç Alibaba"
                },
                "MiniCPM-V-4_5": {
                    "url": "openbmb/MiniCPM-V-4_5",
                    "type": "vision", "params": "8B",
                    "desc": "–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è VL-–º–æ–¥–µ–ª—å"
                },
                "GLM-4V-9B": {
                    "url": "THUDM/glm-4v-9b", 
                    "type": "vision", "params": "9B", 
                    "desc": "–í–∏–∑—É–∞–ª—å–Ω–æ-—è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å THUDM"
                },
                "InternVL2-8B": {
                    "url": "OpenGVLab/InternVL2-8B", 
                    "type": "vision", "params": "8B",
                    "desc": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è VL-–º–æ–¥–µ–ª—å OpenGVLab"
                }
            },
            "üåê –ú–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞": {
                "Hunyuan-MT-7B": {
                    "url": "tencent/Hunyuan-MT-7B",
                    "type": "text", "params": "7B",
                    "desc": "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ Tencent –Ω–∞ 33 —è–∑—ã–∫–∞"
                },
                "Hunyuan-MT-Chimera-7B": {
                    "url": "tencent/Hunyuan-MT-Chimera-7B",
                    "type": "text", "params": "7B",
                    "desc": "–ê–Ω—Å–∞–º–±–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞"
                },
                "NLLB-200-Distilled-600M": {
                    "url": "facebook/nllb-200-distilled-600M",
                    "type": "text", "params": "600M",
                    "desc": "–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ Meta"
                },
                "M2M100-12B": {
                    "url": "facebook/m2m100_12B",
                    "type": "text", "params": "12B",
                    "desc": "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ –Ω–∞ 100+ —è–∑—ã–∫–æ–≤"
                }
            },
            "ü§ñ LLM –º–æ–¥–µ–ª–∏": {
                "Qwen2.5-7B-Instruct": {
                    "url": "Qwen/Qwen2.5-7B-Instruct",
                    "type": "text", "params": "7B",
                    "desc": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å Qwen"
                },
                "Qwen2.5-14B-Instruct": {
                    "url": "Qwen/Qwen2.5-14B-Instruct",
                    "type": "text", "params": "14B",
                    "desc": "Qwen 14B –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á"
                },
                "Qwen2.5-32B-Instruct": {
                    "url": "Qwen/Qwen2.5-32B-Instruct",
                    "type": "text", "params": "32B",
                    "desc": "–¢–æ–ø–æ–≤–∞—è Qwen –¥–ª—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö GPU"
                },
                "Mistral-7B-Instruct-v0.3": {
                    "url": "mistralai/Mistral-7B-Instruct-v0.3",
                    "type": "text", "params": "7B",
                    "desc": "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –º–æ–¥–µ–ª—å Mistral AI"
                },
                "Llama-3.1-8B-Instruct": {
                    "url": "meta-llama/Llama-3.1-8B-Instruct",
                    "type": "text", "params": "8B",
                    "desc": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å Meta"
                }
            },
            "‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è": {
                "–°–≤–æ—è –º–æ–¥–µ–ª—å": {
                    "url": "", 
                    "type": "vision", "params": "?",
                    "desc": "–í–≤–µ–¥–∏—Ç–µ URL –º–æ–¥–µ–ª–∏ –≤—Ä—É—á–Ω—É—é"
                }
            }
        }

    def build_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=15, pady=15)

        self.main_frame = ttk.Frame(self.notebook, padding=20)
        self.notebook.add(self.main_frame, text="üìã –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è")
        
        self.settings_frame = ttk.Frame(self.notebook, padding=20)
        self.notebook.add(self.settings_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        self.build_main_tab()
        self.build_settings_tab()

    def build_main_tab(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        frm = self.main_frame
        frm.columnconfigure(1, weight=1)
        frm.rowconfigure(9, weight=1)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        title_frame = ttk.Frame(frm)
        title_frame.grid(row=0, column=0, columnspan=2, pady=(0,20))
        ttk.Label(title_frame, text="üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä AI-–º–æ–¥–µ–ª–µ–π –≤ bnb4 —Ñ–æ—Ä–º–∞—Ç", 
                 style='Title.TLabel').pack()
        ttk.Label(title_frame, text="–ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏—Ö GPU",
                 style='Info.TLabel').pack(pady=(5,0))

        # –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        model_frame = ttk.LabelFrame(frm, text="üìã –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏", padding=15)
        model_frame.grid(row=1, column=0, columnspan=2, sticky="ew", pady=(0,15))
        model_frame.columnconfigure(1, weight=1)

        ttk.Label(model_frame, text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –º–æ–¥–µ–ª—å:", style='Heading.TLabel').grid(row=0, column=0, sticky="w")
        
        self.model_var = tk.StringVar()
        self.model_cb = ttk.Combobox(model_frame, textvariable=self.model_var, 
                                    state="readonly", width=60, font=('TkDefaultFont', 9))
        self.model_cb.grid(row=0, column=1, sticky="ew", padx=(10,0))

        ttk.Label(model_frame, text="URL –º–æ–¥–µ–ª–∏:", style='Heading.TLabel').grid(row=1, column=0, sticky="w", pady=(15,0))
        self.url_var = tk.StringVar()
        self.url_entry = ttk.Entry(model_frame, textvariable=self.url_var, font=('TkDefaultFont', 9))
        self.url_entry.grid(row=1, column=1, sticky="ew", pady=(15,0), padx=(10,0))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        self.model_info = ttk.Label(model_frame, text="", style='Info.TLabel')
        self.model_info.grid(row=2, column=0, columnspan=2, sticky="w", pady=(10,0))

        # –°–µ–∫—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        params_frame = ttk.LabelFrame(frm, text="‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏", padding=15)
        params_frame.grid(row=2, column=0, columnspan=2, sticky="ew", pady=(0,15))
        params_frame.columnconfigure(1, weight=1)
        params_frame.columnconfigure(3, weight=1)

        ttk.Label(params_frame, text="–î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:", style='Heading.TLabel').grid(row=0, column=0, sticky="w")
        self.ctx_var = tk.IntVar(value=4096)
        ctx_values = [512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144]
        ctx_combo = ttk.Combobox(params_frame, textvariable=self.ctx_var, values=ctx_values, 
                                state="readonly", width=12)
        ctx_combo.grid(row=0, column=1, sticky="w")

        ttk.Label(params_frame, text="–ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ:", style='Heading.TLabel').grid(row=0, column=2, sticky="w", padx=(30,10))
        self.quant_var = tk.StringVar(value="nf4 (bnb4)")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        quant_combo = ttk.Combobox(params_frame, textvariable=self.quant_var, 
                                  values=["nf4 (bnb4)", "fp4"], state="readonly", width=15)
        quant_combo.grid(row=0, column=3, sticky="w")

        ttk.Label(params_frame, text="–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", style='Heading.TLabel').grid(row=1, column=0, sticky="w", pady=(15,0))
        self.device_var = tk.StringVar(value="gpu")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é GPU
        device_combo = ttk.Combobox(params_frame, textvariable=self.device_var, 
                                   values=["auto", "gpu", "cpu"], state="readonly", width=12)
        device_combo.grid(row=1, column=1, sticky="w", pady=(15,0))

        # –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        output_frame = ttk.LabelFrame(frm, text="üìÅ –ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", padding=15)
        output_frame.grid(row=3, column=0, columnspan=2, sticky="ew", pady=(0,15))
        output_frame.columnconfigure(1, weight=1)

        ttk.Label(output_frame, text="–ü–∞–ø–∫–∞:", style='Heading.TLabel').grid(row=0, column=0, sticky="w")
        self.out_var = tk.StringVar(value="./output")
        ttk.Entry(output_frame, textvariable=self.out_var).grid(row=0, column=1, sticky="ew", padx=(10,10))
        ttk.Button(output_frame, text="üìÅ –û–±–∑–æ—Ä", command=self.browse_folder).grid(row=0, column=2)

        # –°–µ–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        progress_frame = ttk.LabelFrame(frm, text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", padding=15)
        progress_frame.grid(row=4, column=0, columnspan=2, sticky="ew", pady=(0,15))
        progress_frame.columnconfigure(0, weight=1)

        self.progress = ttk.Progressbar(progress_frame, maximum=100, length=400)
        self.progress.grid(row=0, column=0, sticky="ew", pady=(0,10))

        self.status = ttk.Label(progress_frame, text="–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ", foreground="#28a745")
        self.status.grid(row=1, column=0, sticky="w")

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º
        btn_frame = ttk.Frame(frm)
        btn_frame.grid(row=5, column=0, columnspan=2, pady=20)

        self.start_btn = ttk.Button(btn_frame, text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é", 
                                   command=self.start, width=25)
        self.start_btn.pack(side="left", padx=(0,10))

        self.stop_btn = ttk.Button(btn_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                                  command=self.stop, state="disabled", width=15)
        self.stop_btn.pack(side="left", padx=(0,10))

        ttk.Button(btn_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥", 
                   command=self.clear_log, width=20).pack(side="left")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞

        # –ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π
        log_frame = ttk.LabelFrame(frm, text="üìù –ñ—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π")
        log_frame.grid(row=6, column=0, columnspan=2, sticky="nsew", pady=(20,0))
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)

        self.log = tk.Text(log_frame, state="disabled", wrap="word", height=15,  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ –ª–æ–≥–∞
                          background="#f8f9fa", font=('Consolas', 9))
        self.log.grid(row=0, column=0, sticky="nsew", padx=(5,0), pady=5)

        vs = ttk.Scrollbar(log_frame, command=self.log.yview)
        vs.grid(row=0, column=1, sticky="ns", pady=5)
        self.log.config(yscrollcommand=vs.set)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.populate_model_cb()
        self.model_cb.bind('<<ComboboxSelected>>', self.on_model_change)
        self._set_default_model()

    def build_settings_tab(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        frm = self.settings_frame

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        save_frame = ttk.LabelFrame(frm, text="üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", padding=15)
        save_frame.grid(row=0, column=0, columnspan=2, sticky="ew", pady=(0,20))
        save_frame.columnconfigure(1, weight=1)

        self.safe_ser_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(save_frame, text="–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è", 
                       variable=self.safe_ser_var).grid(row=0, column=0, sticky="w")
        ttk.Label(save_frame, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SafeTensors —Ñ–æ—Ä–º–∞—Ç (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)",
                 style='Info.TLabel').grid(row=0, column=1, sticky="w", padx=(10,0))

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        sys_frame = ttk.LabelFrame(frm, text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ", padding=15)
        sys_frame.grid(row=1, column=0, columnspan=2, sticky="ew")
        
        try:
            if torch.cuda.is_available():
                gpu_name = torch.cuda.get_device_name()
                gpu_memory = torch.cuda.get_device_properties(0).total_memory // (1024**3)
                sys_info = f"üéÆ GPU: {gpu_name}\nüíæ –í–∏–¥–µ–æ–ø–∞–º—è—Ç—å: {gpu_memory} GB\n‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞"
            else:
                sys_info = "‚ùå CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ CPU"
        except:
            sys_info = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
        ttk.Label(sys_frame, text=sys_info, font=('TkDefaultFont', 9)).pack(anchor="w")

        # –ü–æ—è—Å–Ω–µ–Ω–∏—è –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        note_frame = ttk.LabelFrame(frm, text="üìã –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", padding=15)
        note_frame.grid(row=2, column=0, columnspan=2, sticky="ew", pady=(20,0))
        
        note_text = ("–í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n"
                    "‚Ä¢ auto - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä (GPU –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)\n"
                    "‚Ä¢ gpu - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU\n" 
                    "‚Ä¢ cpu - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (–º–µ–¥–ª–µ–Ω–Ω–æ)")
        ttk.Label(note_frame, text=note_text, style='Info.TLabel').pack(anchor="w")

    def populate_model_cb(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏"""
        values = []
        for group_name, models in self.model_groups.items():
            values.append(f"--- {group_name} ---")
            for model_name in models.keys():
                values.append(f"  {model_name}")
        
        self.model_cb['values'] = values

    def _set_default_model(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        values = self.model_cb['values']
        if len(values) > 1:
            self.model_cb.set(values[1])
            self.on_model_change()

    def get_model_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        selected = self.model_var.get().strip()
        if not selected or selected.startswith("---"):
            return None
            
        model_name = selected.strip()
        for group_models in self.model_groups.values():
            if model_name in group_models:
                return group_models[model_name]
        return None

    def on_model_change(self, _=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        info = self.get_model_info()
        if not info:
            return
            
        self.url_var.set(info['url'])
        
        if info['url']:
            self.url_entry.config(state="readonly")
        else:
            self.url_entry.config(state="normal")
            
        info_text = f"üìè {info['params']} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ | üè∑Ô∏è {info['type']} | üìù {info['desc']}"
        self.model_info.config(text=info_text)

    def browse_folder(self):
        """–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        folder = filedialog.askdirectory(initialdir=self.out_var.get())
        if folder:
            self.out_var.set(folder)

    def redirect_output(self):
        """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ stdout/stderr –≤ –æ–∫–Ω–æ –ª–æ–≥–∞"""
        class LogStream:
            def __init__(self, log_func):
                self.log_func = log_func
            def write(self, message):
                if message.strip():
                    self.log_func(message)
            def flush(self):
                pass

        sys.stdout = LogStream(self.log_msg)
        sys.stderr = LogStream(self.log_msg)

    def log_msg(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∂—É—Ä–Ω–∞–ª –æ–ø–µ—Ä–∞—Ü–∏–π"""
        self.log.config(state="normal")
        self.log.insert("end", message if message.endswith("\n") else message + "\n")
        self.log.see("end")
        self.log.config(state="disabled")

    def clear_log(self):
        """–û—á–∏—Å—Ç–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        self.log.config(state="normal")
        self.log.delete("1.0", "end")
        self.log.config(state="disabled")

    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏"""
        url = self.url_var.get().strip()
        if not url:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL –º–æ–¥–µ–ª–∏")
            return

        info = self.get_model_info() or {}
        
        device_setting = self.device_var.get()
        force_cpu = device_setting == "cpu"
        device_map = device_setting if device_setting in ["cpu", "cuda"] else "auto"
        
        config = {
            'TARGET_MODEL_URL': url,
            'OUTPUT_PATH': self.out_var.get(),
            'MODEL_TYPE': info.get('type', 'vision'),
            'SAFE_SERIALIZATION': self.safe_ser_var.get(),
            'MAX_SEQ_LENGTH': self.ctx_var.get(),
            'FORCE_CPU': force_cpu,
            'DEVICE': device_map
        }

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.start_btn.config(state="disabled")
        self.stop_btn.config(state="normal")
        self.progress['value'] = 0
        self.status.config(text="–ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏...", foreground="#fd7e14")

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        self.stop_evt.clear()
        self.proc = Process(target=download_worker, args=(config, self.child_conn, self.stop_evt), daemon=True)
        self.proc.start()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é?"):
            self.stop_evt.set()
            if self.proc and self.proc.is_alive():
                self.proc.terminate()
            self._reset_interface()
            self.status.config(text="–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", foreground="#dc3545")

    def _reset_interface(self):
        """–°–±—Ä–æ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        self.start_btn.config(state="normal")
        self.stop_btn.config(state="disabled")

    def check_pipe(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            while self.parent_conn.poll():
                message = self.parent_conn.recv()
                if isinstance(message, tuple) and len(message) >= 2:
                    msg_type = message[0]
                    
                    if msg_type == 'progress':
                        self.progress['value'] = message[1]
                        if len(message) > 2 and message[2]:
                            self.status.config(text=f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {message[2]}", foreground="#fd7e14")
                    elif msg_type == 'log':
                        from datetime import datetime
                        timestamp = datetime.now().strftime("%H:%M:%S")
                        self.log_msg(f"[{timestamp}] {message[1]}")
                    elif msg_type == 'status':
                        self.status.config(text=message[1], foreground="#fd7e14")
                    elif msg_type == 'done':
                        self._reset_interface()
                        self.status.config(text="‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", foreground="#28a745")
                        messagebox.showinfo("–£—Å–ø–µ—Ö", "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ bnb4 —Ñ–æ—Ä–º–∞—Ç!")
        except:
            pass
        finally:
            self.root.after(100, self.check_pipe)

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        settings_file = "gui_settings.json"
        if Path(settings_file).exists():
            try:
                with open(settings_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                    
                if settings.get('model') in self.model_cb['values']:
                    self.model_cb.set(settings.get('model'))
                    self.on_model_change()
                    
                self.out_var.set(settings.get('output_path', self.out_var.get()))
                self.ctx_var.set(settings.get('context_length', self.ctx_var.get()))
                self.device_var.set(settings.get('device', 'gpu'))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é GPU
                self.safe_ser_var.set(settings.get('safe_serialization', True))
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        settings = {
            'model': self.model_cb.get(),
            'output_path': self.out_var.get(),
            'context_length': self.ctx_var.get(),
            'device': self.device_var.get(),
            'safe_serialization': self.safe_ser_var.get()
        }
        
        try:
            with open("gui_settings.json", 'w', encoding='utf-8') as f:
                json.dump(settings, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def on_close(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.proc and self.proc.is_alive():
            if not messagebox.askokcancel("–í—ã—Ö–æ–¥", "–ü—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É?"):
                return
            self.stop_evt.set()
            self.proc.terminate()

        self.save_settings()
        self.root.destroy()


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    root = tk.Tk()
    app = ConverterGUI(root)
    root.protocol("WM_DELETE_WINDOW", app.on_close)
    root.mainloop()


if __name__ == "__main__":
    main()
